{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Aviatrix Systems - Creates the necessary lambdas necessary to configure the controller",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
				"Label": {
					"default": "Lambda Required Parameters"
				},
				"Parameters": ["controllerip", "username", "privateip", "adminemail", "password", "Account", "AviatrixRoleApp", "AviatrixRoleEC2", "VPC", "SubnetParam", "SubnetParamHA", "GatewaySizeParam"]
			}]
		}
	},
	"Parameters": {
		"controllerip": {
			"Type": "String",
			"Description": "IP of the controller"
		},
		"username": {
			"Type": "String",
			"Description": "Username for the controller"
		},
		"privateip": {
			"Type": "String",
			"Description": "Private IP of the controller"
		},
		"adminemail": {
			"Type": "String",
			"Description": "Email of the controller admin"
		},
		"password": {
			"Type": "String",
			"Description": "Password for the controller"
		},
		"Account": {
			"Type": "String",
			"Description": "AWS Account"
		},
		"AviatrixRoleApp": {
			"Type": "String",
			"Description": "ARN for aviatrix-role-app"
		},
		"AviatrixRoleEC2": {
			"Type": "String",
			"Description": "ARN for aviatrix-role-ec2"
		},
		"VPC": {
			"Type": "String",
			"Description": "VPC to deploy the Controller and Hub Gateway"
		},
		"SubnetParam": {
			"Type": "String",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
			"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
			"Description": "Subnet for the controller (Default: 10.1.0.0/24)",
			"Default": "10.1.0.0/24"
		},
		"SubnetParamHA": {
			"Type": "String",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
			"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
			"Description": "Subnet for the controller (Default: 10.1.1.0/24)",
			"Default": "10.1.1.0/24"
		},
		"GatewaySizeParam": {
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": ["t2.small", "t2.large", "m3.medium", "m3.large", "m3.xlarge", "m4.large", "m4.xlarge", "c4.large", "c4.xlarge"],
			"Description": "Select an instance size. Default is t2.small."
		}
	},
	"Resources": {
		"AviatrixRoleAPI": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "aviatrix-role-api",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com",
								"edgelambda.amazonaws.com"
							]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/service-role/"
			}
		},
		"AviatrixAPIRolePolicy": {
			"Type": "AWS::IAM::ManagedPolicy",
			"Properties": {
				"ManagedPolicyName": "aviatrix-api-role-policy",
				"Description": "Policy for creating aviatrix-api-role-policy",
				"Path": "/service-role/",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"logs:CreateLogGroup",
							"logs:CreateLogStream",
							"logs:PutLogEvents",
							"ec2:Describe*",
							"ec2:CreateTags",
							"SQS:*",
							"SNS:*"
						],
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "AviatrixRoleAPI"
				}]
			}
		},
		"AviatrixKey": {
			"Type": "AWS::KMS::Key",
			"Properties": {
				"Description": "Key to encrypt Aviatrix Data",
				"KeyPolicy": {
					"Version": "2012-10-17",
					"Id": "key-default-1",
					"Statement": [{
							"Sid": "Enable IAM User Permissions",
							"Effect": "Allow",
							"Principal": {
								"AWS": [{
									"Fn::Join": ["", ["arn:aws:iam::", {
										"Ref": "AWS::AccountId"
									}, ":root"]]
								}]
							},
							"Action": "kms:*",
							"Resource": "*"
						},
						{
							"Sid": "Allow use of the key",
							"Effect": "Allow",
							"Principal": {
								"AWS": [{
									"Fn::GetAtt": ["AviatrixRoleAPI", "Arn"]
								}]
							},
							"Action": [
								"kms:Encrypt",
								"kms:Decrypt",
								"kms:ReEncrypt*",
								"kms:GenerateDataKey*",
								"kms:DescribeKey"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"AviatrixKeyAlias": {
			"Type": "AWS::KMS::Alias",
			"Properties": {
				"AliasName": "alias/AviatrixKey",
				"TargetKeyId": {
					"Ref": "AviatrixKey"
				}
			}
		},
		"AviatrixGWQueue": {
			"Type": "AWS::SQS::Queue",
			"Properties": {
				"QueueName": "GatewayQueue"
			}
		},
		"AviatrixControllerLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Handler": "aviatrix_controller.handler",
				"Role": {
					"Fn::GetAtt": ["AviatrixRoleAPI", "Arn"]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": ["", ["quickstart-aviatrix", "-", {
							"Ref": "AWS::Region"
						}]]
					},
					"S3Key": "scripts/aviatrix_controller.py.zip"
				},
				"KmsKeyArn": {
					"Fn::GetAtt": ["AviatrixKey", "Arn"]
				},
				"Environment": {
					"Variables": {
						"Controller_IP": {
							"Ref": "controllerip"
						},
						"Username": {
							"Ref": "username"
						},
						"Private_IP": {
							"Ref": "privateip"
						},
						"Admin_Email": {
							"Ref": "adminemail"
						},
						"Password": {
							"Ref": "password"
						},
						"Account": {
							"Ref": "Account"
						},
						"AviatrixRoleApp": {
							"Ref": "AviatrixRoleApp"
						},
						"AviatrixRoleEC2": {
							"Ref": "AviatrixRoleEC2"
						},
						"VPC": {
							"Ref": "VPC"
						},
						"SubnetParam": {
							"Ref": "SubnetParam"
						},
						"SubnetParamHA": {
							"Ref": "SubnetParamHA"
						},
						"Region": {
							"Ref": "AWS::Region"
						},
						"GatewaySizeParam": {
							"Ref": "GatewaySizeParam"
						},
						"GatewayQueue": {
							"Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
						},
						"GatewayQueueURL": {
							"Ref": "AviatrixGWQueue"
						},
						"GatewayTopic": {
							"Ref": "AviatrixGWTopic"
						}
					}
				},
				"Runtime": "python2.7",
				"Timeout": "300"
			}
		},
		"AviatrixControllerLambdaTrigger": {
			"Type": "Custom::ControllerLamdbdaTrigger",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"AviatrixControllerLambda",
						"Arn"
					]
				}
			}
		},
		"AviatrixGatewayLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Handler": "aviatrix_gateway.handler",
				"Role": {
					"Fn::GetAtt": ["AviatrixRoleAPI", "Arn"]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": ["", ["quickstart-aviatrix", "-", {
							"Ref": "AWS::Region"
						}]]
					},
					"S3Key": "scripts/aviatrix_gateway.py.zip"
				},
				"KmsKeyArn": {
					"Fn::GetAtt": ["AviatrixKey", "Arn"]
				},
				"Environment": {
					"Variables": {
						"Controller_IP": {
							"Ref": "controllerip"
						},
						"Username": {
							"Ref": "username"
						},
						"Password": {
							"Ref": "password"
						},
						"VPC": {
							"Ref": "VPC"
						},
						"Region": {
							"Ref": "AWS::Region"
						},
						"GatewaySizeParam": {
							"Ref": "GatewaySizeParam"
						},
						"GatewayQueue": {
							"Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
						},
						"GatewayQueueURL": {
							"Ref": "AviatrixGWQueue"
						}
					}
				},
				"Runtime": "python2.7",
				"Timeout": "300"
			}
		},
		"AviatrixGWTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [{
					"Endpoint": {
						"Fn::GetAtt": ["AviatrixGatewayLambda", "Arn"]
					},
					"Protocol": "lambda"
				}],
				"TopicName": "AviatrixGatewayTopic"
			}
		},
		"InvokeGWLambdaPermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:InvokeFunction",
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "AviatrixGWTopic"
				},
				"FunctionName": {
					"Fn::GetAtt": ["AviatrixGatewayLambda", "Arn"]
				}
			}
		},
		"AviatrixPollerSQSLambda": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Handler": "aviatrix_poller.handler",
				"Role": {
					"Fn::GetAtt": ["AviatrixRoleAPI", "Arn"]
				},
				"Code": {
					"S3Bucket": {
						"Fn::Join": ["", ["quickstart-aviatrix", "-", {
							"Ref": "AWS::Region"
						}]]
					},
					"S3Key": "scripts/aviatrix_poller.py.zip"
				},
				"KmsKeyArn": {
					"Fn::GetAtt": ["AviatrixKey", "Arn"]
				},
				"Environment": {
					"Variables": {
						"GatewayQueue": {
							"Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
						},
						"GatewayQueueURL": {
							"Ref": "AviatrixGWQueue"
						},
						"HubVPC": {
							"Ref": "VPC"
						},
						"GatewayTopic": {
							"Ref": "AviatrixGWTopic"
						}
					}
				},
				"Runtime": "python2.7",
				"Timeout": "300"
			}
		},
		"AviatrixPollerEvent": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"Description": "Rule to trigger AviatrixPoller every 1 minutes to find VPCs that need to be attached to the Transit Hub VPC.",
				"ScheduleExpression": "cron(* * * * ? *)",
				"State": "ENABLED",
				"Targets": [{
					"Id": {
						"Fn::Join": ["-", [{
							"Ref": "AWS::StackName"
						}, "VGW-Poller-5min"]]
					},
					"Arn": {
						"Fn::GetAtt": ["AviatrixPollerSQSLambda", "Arn"]
					}
				}]
			}
		},
		"AviatrixPermissionForPollerEvent": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Ref": "AviatrixPollerSQSLambda"
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "events.amazonaws.com",
				"SourceArn": {
					"Fn::GetAtt": ["AviatrixPollerEvent", "Arn"]
				}
			}
		}
	}
}
