{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Aviatrix Systems - Master Stack - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata" :
  {
    "AWS::CloudFormation::Interface" :
    {
      "ParameterGroups" :
      [
        { "Label" : { "default": "Amazon EC2 Configuration" }, "Parameters" : [ "KeyPairName" ] },
        { "Label" : { "default" : "VPC Configuration"}, "Parameters" : [ "VPCCIDR", "AvailabilityZones", "PublicSubnet1CIDR", "PublicSubnet2CIDR" ] },
        { "Label" : { "default" : "Controller Information" }, "Parameters" : [ "AdminEmail", "Password", "ControllerSize" ] },
        { "Label" : { "default" : "Licensing Configuration"}, "Parameters" : [ "LicenseModel", "License" ] },
        { "Label" : { "default" : "Gateway Information" }, "Parameters" : [ "HubGWSize", "SpokeGWSize", "SpokeTag"] },
        { "Label" : { "default" : "IAM Roles Information" }, "Parameters" : [ "OtherAccount", "OtherAccountRoleApp", "OtherAccountRoleEC2"] },
        { "Label": { "default": "AWS Quick Start Configuration" }, "Parameters": [ "QSS3BucketName", "QSS3KeyPrefix" ] }
      ],
      "ParameterLabels" :
      {
        "KeyPairName" : { "default" : "Which keypair will be used?" },
        "VPCCIDR": { "default": "VPC CIDR" },
        "AvailabilityZones" : { "default": "Availability zones" },
        "PublicSubnet1CIDR": { "default": "Public Subnet 1 CIDR" },
        "PublicSubnet2CIDR": { "default": "Public Subnet 2 CIDR" },
        "AdminEmail" : { "default" : "Administrator email address?"},
        "Password" : { "default" : "Password for admin on Aviatrix Controller? " },
        "ControllerSize" : { "default" : "Instance Size for the Aviatrix Controller?"},
        "LicenseModel" : { "default" : "Licensing Model?:"},
        "License" :  { "default" : "Enter your license key:"},
        "HubGWSize" : { "default" : "Instance Size for the Aviatrix Hub Gateway?" },
        "SpokeGWSize" : { "default" : "Instance Size for the Aviatrix Spoke Gateways?" },
        "SpokeTag" : { "default" : "Spoke VPC Tag Name" },
        "OtherAccount" : { "default" : "Second Account number"},
        "OtherAccountRoleApp" : { "default" : "ARN for Aviatrix-role-app on secondary account"},
        "OtherAccountRoleEC2" : { "default" : "ARN for aviatrix-role-ec2 on secondary account"},
        "QSS3BucketName": { "default": "Quick Start S3 Bucket Name" },
        "QSS3KeyPrefix": { "default": "Quick Start S3 Key Prefix" }
       }
    }
  },
  "Parameters": {
    "KeyPairName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Select your Keypair"
    },
    "VPCCIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.0.0/16",
        "Description": "CIDR Block for the VPC",
        "Type": "String"
    },
    "AvailabilityZones": {
      "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved and only 2 AZs are used for this deployment.",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "PublicSubnet1CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.10.0/24",
        "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1",
        "Type": "String"
    },
    "PublicSubnet2CIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.20.0/24",
        "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2",
        "Type": "String"
    },
    "AdminEmail": {
      "Type": "String",
      "Description": " Email of the controller's admin"
    },
    "Password": {
      "Type": "String",
      "Description": " Password for the controller. Please use a complex password.",
      "NoEcho": true
    },
    "ControllerSize": {
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : ["t2.medium", "m3.medium","m3.large","m3.xlarge","m4.large","m4.xlarge","c4.large","c4.xlarge"],
      "Description" : "Select an instance size. Default is t2.medium."
    },
    "LicenseModel" : {
      "Description" : "Choose between BYOL or License Included - licensing models.",
      "Type" : "String",
      "Default" : "LicenseIncluded",
      "AllowedValues" : [ "LicenseIncluded", "BYOL" ]
    },
    "License": {
      "Description" : "(Required, only if using BYOL License Model) If you don't have one, please contact sales@aviatrix.com. For LicenseIncluded leave BLANK",
      "Type" : "String"
    },
    "HubGWSize": {
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium","m3.large","m3.xlarge","m4.large","m4.xlarge","c4.large","c4.xlarge"],
      "Description" : "Select an instance size. Default is t2.medium."
    },
    "SpokeGWSize": {
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium","m3.large","m3.xlarge","m4.large","m4.xlarge","c4.large","c4.xlarge"],
      "Description" : "Select an instance size. Default is t2.micro."
    },
    "SpokeTag" :{
      "Type" : "String",
      "Default" : "aviatrix-spoke",
      "Description" : "Tag to be used to identify spoke VPCs to connect to Transit VPC. Default is aviatrix-spoke."
    },
    "OtherAccount" : {
        "Type" : "String",
        "Default" : "",
        "Description" : "(Optional) Enter the number of the secondary AWS account where spokes will be deployed."
     },
    "OtherAccountRoleApp" : {
       "Type" : "String",
       "Default" : "",
       "Description" : "(Optional) Enter the ARN of the aviatrix-role-app on the secondary account where spokes will be deployed."
    },
    "OtherAccountRoleEC2" : {
       "Type" : "String",
       "Default" : "",
       "Description" : "(Optional) Enter the ARN of the Aviatrix-role-ec2 on the secondary account where spokes will be deployed."
    },
    "QSS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Default": "quickstart-reference",
      "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Type": "String"
     },
    "QSS3KeyPrefix": {
       "AllowedPattern": "^[0-9a-zA-Z-/]*$",
       "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
       "Default": "microsoft/activedirectory/latest/",
       "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
       "Type": "String"
     }
  },
  "Conditions" : {
    "NotBlankLicense" : { "Fn::Not" : [ { "Fn::Equals": [ { "Ref": "License" }, "" ] } ] },
    "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
    }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : { "LicenseIncluded" : "ami-84aaf3fe",  "BYOL": "ami-84aaf3fe" },
      "us-east-2" : { "LicenseIncluded" : "ami-b182a9d4",  "BYOL": "ami-b182a9d4" },
      "us-west-1" : { "LicenseIncluded" : "ami-5da9a93d",  "BYOL": "ami-5da9a93d" },
      "us-west-2" : { "LicenseIncluded" : "ami-af0ebad7",  "BYOL": "ami-af0ebad7" },
      "ca-central-1" : { "LicenseIncluded" : "ami-908702f4",  "BYOL": "ami-908702f4" },
      "eu-central-1" : { "LicenseIncluded" : "ami-d44edcbb",  "BYOL": "ami-d44edcbb" },
      "eu-west-1" : { "LicenseIncluded" : "ami-beaa39c7",  "BYOL": "ami-beaa39c7" },
      "eu-west-2" : { "LicenseIncluded" : "ami-02b7af66",  "BYOL": "ami-02b7af66" },
      "eu-west-3" : { "LicenseIncluded" : "ami-4000b73d",  "BYOL": "ami-4000b73d" },
      "ap-southeast-1" : { "LicenseIncluded" : "ami-b65122ca",  "BYOL": "ami-b65122ca" },
      "ap-southeast-2" : { "LicenseIncluded" : "ami-58e01d3a",  "BYOL": "ami-58e01d3a" },
      "ap-northeast-1" : { "LicenseIncluded" : "ami-75ec7413",  "BYOL": "ami-75ec7413" },
      "ap-northeast-2" : { "LicenseIncluded" : "ami-1596367b",  "BYOL": "ami-1596367b" },
      "sa-east-1" : { "LicenseIncluded" : "ami-e94c0e85",  "BYOL": "ami-e94c0e85" },
      "ap-south-1" : { "LicenseIncluded" : "ami-18194e77",  "BYOL": "ami-18194e77" }
    }
  },
  "Resources" : {
    "VPCStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template",
                        {
                            "QSS3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            }
                        }
                    ]
                },
                "Parameters": {
                    "AvailabilityZones": {
                        "Fn::Join": [
                            ",",
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "NumberOfAZs": "2",
                    "PublicSubnet1CIDR": {
                        "Ref": "PublicSubnet1CIDR"
                    },
                    "PublicSubnet2CIDR": {
                        "Ref": "PublicSubnet2CIDR"
                    },
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "CreatePrivateSubnets" : "false"
                }
            }
        },

    "AVXSG": {
      "DependsOn" : "VPCStack",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Aviatrix - Allow HTTPS to Controller",
        "VpcId":  { "Fn::GetAtt" : [ "VPCStack", "Outputs.VPCID" ] } ,
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "CidrIp": "0.0.0.0/0",
          "FromPort": "443",
          "ToPort": "443"
        } ],
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix Security Group" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "AVXController" : {
      "DependsOn" : [ "VPCStack" , "AVXSG" ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, { "Ref": "LicenseModel" } ] },
        "KeyName" : { "Ref": "KeyPairName" },
        "InstanceType": { "Ref" : "ControllerSize" },
        "IamInstanceProfile" : "aviatrix-role-ec2",
        "NetworkInterfaces": [ {
          "DeviceIndex": "0",
          "GroupSet": [ { "Ref" : "AVXSG" } ],
          "SubnetId": { "Fn::GetAtt" : [ "VPCStack", "Outputs.PublicSubnet1ID" ] }
        } ],
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix Controller" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "AVXEIP": {
      "DependsOn" : "AVXController",
      "Type": "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : {"Ref":  "AVXController" }
      }
    },

    "AviatrixKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to encrypt Aviatrix Data",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [ {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root" ] ] }
                ]
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ] }
                ]
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "AviatrixGWQueue": {
      "Type": "AWS::SQS::Queue"
    },
    "AviatrixControllerLambda": {
      "DependsOn": "AVXEIP",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "aviatrix_controller.handler",
        "Role": {
          "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "quickstart-aviatrix-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "scripts/aviatrix_controller.py.zip"
        },
        "KmsKeyArn": {
          "Fn::GetAtt": [ "AviatrixKey", "Arn" ]
        },
        "Environment": {
          "Variables": {
            "Controller_IP": {
              "Fn::GetAtt" : [ "AVXController" , "PublicIp" ]
            },
            "Username": "admin",
            "Private_IP": {
              "Fn::GetAtt" : [ "AVXController" , "PrivateIp" ]
            },
            "Admin_Email": {
              "Ref": "AdminEmail"
            },
            "Password": {
              "Ref": "Password"
            },
            "Account": {
              "Ref": "AWS::AccountId"
            },
            "AviatrixRoleApp": {
              "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/aviatrix-role-app" ] ]
            },
            "AviatrixRoleEC2": {
              "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/aviatrix-role-ec2" ] ]
            },
            "VPC": {
              "Fn::GetAtt" : [ "VPCStack" , "Outputs.VPCID" ]
            },
            "Subnet": {
              "Ref": "PublicSubnet1CIDR"
            },
            "SubnetHA": {
              "Ref": "PublicSubnet2CIDR"
            },
            "Region": {
              "Ref": "AWS::Region"
            },
            "HubGWSize": {
              "Ref": "HubGWSize"
            },
            "SpokeGWSize": {
              "Ref": "SpokeGWSize"
            },
            "GatewayQueue": {
              "Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
            },
            "GatewayQueueURL": {
              "Ref": "AviatrixGWQueue"
            },
            "GatewayTopic": {
              "Ref": "AviatrixGWTopic"
            },
            "OtherAccount": {
              "Ref": "OtherAccount"
            },
            "OtherAccountRoleApp": {
              "Ref": "OtherAccountRoleApp"
            },
            "OtherAccountRoleEC2": {
              "Ref": "OtherAccountRoleEC2"
            },
            "LicenseModel" : {
              "Ref": "LicenseModel"
            },
            "License" : {
              "Ref": "License"
            }
          }
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },
    "AviatrixGatewayLambda": {
      "DependsOn": "AVXEIP",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "aviatrix_gateway.handler",
        "Role": {
          "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "quickstart-aviatrix-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "scripts/aviatrix_gateway.py.zip"
        },
        "KmsKeyArn": {
          "Fn::GetAtt": [ "AviatrixKey", "Arn" ]
        },
        "Environment": {
          "Variables": {
            "Controller_IP": {
              "Fn::GetAtt" : [ "AVXController" , "PublicIp" ]
            },
            "Username": "admin",
            "Password": {
              "Ref": "Password"
            },
            "VPC": {
              "Fn::GetAtt" : [ "VPCStack" , "Outputs.VPCID" ]
            },
            "Region": {
              "Ref": "AWS::Region"
            },
            "HubGWSize": {
              "Ref": "HubGWSize"
            },
            "SpokeGWSize": {
              "Ref": "SpokeGWSize"
            },
            "SpokeTag": {
              "Ref": "SpokeTag"
            },
            "OtherAccountRoleApp": {
              "Ref": "OtherAccountRoleApp"
            },
            "GatewayQueue": {
              "Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
            },
            "GatewayQueueURL": {
              "Ref": "AviatrixGWQueue"
            }
          }
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },
    "AviatrixGWTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": {
            "Fn::GetAtt": [ "AviatrixGatewayLambda", "Arn" ]
          },
          "Protocol": "lambda"
        }]
      }
    },
    "InvokeGWLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "AviatrixGWTopic"
        },
        "FunctionName": {
          "Fn::GetAtt": [ "AviatrixGatewayLambda", "Arn" ]
        }
      }
    },
    "AviatrixPollerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "aviatrix_poller.handler",
        "Role": {
          "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "quickstart-aviatrix-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "scripts/aviatrix_poller.py.zip"
        },
        "KmsKeyArn": {
          "Fn::GetAtt": [ "AviatrixKey", "Arn" ]
        },
        "Environment": {
          "Variables": {
            "GatewayQueue": {
              "Fn::GetAtt": [ "AviatrixGWQueue", "QueueName" ]
            },
            "GatewayQueueURL": {
              "Ref": "AviatrixGWQueue"
            },
            "HubVPC": {
              "Fn::GetAtt" : [ "VPCStack" , "Outputs.VPCID" ]
            },
            "SpokeGWSize": {
              "Ref": "SpokeGWSize"
            },
            "SpokeTag": {
              "Ref": "SpokeTag"
            },
            "OtherAccountRoleApp": {
              "Ref": "OtherAccountRoleApp"
            },
            "GatewayTopic": {
              "Ref": "AviatrixGWTopic"
            }
          }
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },
    "AviatrixPollerEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Rule to trigger AviatrixPoller every 2 minutes to find VPCs that need to be attached to the Transit Hub VPC.",
        "ScheduleExpression": "cron(/2 * * * ? *)",
        "State": "ENABLED",
        "Targets": [ {
          "Id": {
            "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "Poller-2min" ] ]
          },
          "Arn": {
            "Fn::GetAtt": [ "AviatrixPollerLambda", "Arn" ]
          }
        } ]
      }
    },
    "AVXPollerEventPerm": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AviatrixPollerLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [ "AviatrixPollerEvent", "Arn" ]
        }
      }
    }
  },
  "Outputs" : {
    "AviatrixControllerEIP" : { "Description": "AviatrixController External IP", "Value" : { "Fn::GetAtt" : [ "AVXController" , "PublicIp" ] } },
    "AviatrixControllerPrivateIP" : { "Description": "AviatrixController Private IP", "Value" : { "Fn::GetAtt" : [ "AVXController" , "PrivateIp" ] } }
  }
}
