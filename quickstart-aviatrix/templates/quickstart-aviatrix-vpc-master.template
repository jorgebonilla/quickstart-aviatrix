{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Aviatrix Systems - Master Stack - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata" :
  {
    "AWS::CloudFormation::Interface" :
    {
      "ParameterGroups" :
      [
        { "Label" : { "default": "Amazon EC2 Configuration" }, "Parameters" : [ "KeyNameParam" ] },
        { "Label" : { "default" : "VPC Configuration"}, "Parameters" : [ "NewVPCCIDRParam", "NewSubnetParam", "NewAZParam", "NewSubnetParamHA", "NewAZParamHA" ] },
        { "Label" : { "default" : "Controller Information" }, "Parameters" : [ "AdminEmailParam", "PasswordParam", "ControllerSizeParam" ] },
        { "Label" : { "default" : "Licensing Configuration"}, "Parameters" : [ "LicenseModel", "License" ] },
        { "Label" : { "default" : "Gateway Information" }, "Parameters" : [ "HubGWSizeParam", "SpokeGWSizeParam", "SpokeTagParam"] },
        { "Label" : { "default" : "IAM Roles Information" }, "Parameters" : [ "OtherAccountParam", "OtherAccountRoleAppParam", "OtherAccountRoleEC2Param"] }
      ],
      "ParameterLabels" :
      {
         "NewVPCCIDRParam" : { "default" : "VPC's CIDR Block?"},
         "NewSubnetParam" : { "default" : "Subnet CIDR Block?"},
         "NewSubnetParamHA" : { "default" : "Subnet CIDR Block for HA?"},
         "NewAZParam" : { "default": "Availability zone" },
         "NewAZParamHA" : { "default": "Availability zone for HA"},
         "KeyNameParam" : { "default" : "Which keypair will be used?" },
         "AdminEmailParam" : { "default" : "Administrator email address?"},
         "PasswordParam" : { "default" : "Password for admin on Aviatrix Controller? " },
         "ControllerSizeParam" : { "default" : "Instance Size for the Aviatrix Controller?"},
         "HubGWSizeParam" : { "default" : "Instance Size for the Aviatrix Hub Gateway?" },
         "SpokeGWSizeParam" : { "default" : "Instance Size for the Aviatrix Spoke Gateways?" },
         "SpokeTagParam" : { "default" : "Spoke VPC Tag Name" },
         "OtherAccountParam" : { "default" : "Second Account number"},
         "OtherAccountRoleAppParam" : { "default" : "ARN for Aviatrix-role-app on secondary account"},
         "OtherAccountRoleEC2Param" : { "default" : "ARN for aviatrix-role-ec2 on secondary account"},
         "LicenseModel" : { "default" : "Licensing Model?:"},
         "License" :  { "default" : "Enter your license key:"}
       }
    }
  },
  "Parameters": {
    "NewVPCCIDRParam" : {
      "Type" : "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Description" : "(Required) VPC subnet CIDR block (Default: 10.1.0.0/16)",
      "Default": "10.1.0.0/16"
    },
    "NewSubnetParam" : {
      "Type" : "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Description" : "(Required) Subnet for the Controller and Hub Gateway (Default: 10.1.0.0/24)",
      "Default": "10.1.0.0/24"
    },
    "NewSubnetParamHA" : {
      "Type" : "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Description" : "(Required) Subnet for the HA Hub Gateway (Default: 10.1.1.0/24)",
      "Default": "10.1.1.0/24"
    },
    "NewAZParam":{
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "NewAZParamHA":{
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "KeyNameParam": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "(Required) Select your Keypair"
    },
    "AdminEmailParam": {
      "Type": "String",
      "Description": "(Required) Email of the controller's admin"
    },
    "PasswordParam": {
      "Type": "String",
      "Description": "(Required) Password for the controller. Please use a complex password.",
      "NoEcho": true
    },
    "ControllerSizeParam": {
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : ["t2.medium", "m3.medium","m3.large","m3.xlarge","m4.large","m4.xlarge","c4.large","c4.xlarge"],
      "Description" : "Select an instance size. Default is t2.medium."
    },
    "HubGWSizeParam": {
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium","m3.large","m3.xlarge","m4.large","m4.xlarge","c4.large","c4.xlarge"],
      "Description" : "Select an instance size. Default is t2.medium."
    },
    "SpokeGWSizeParam": {
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m3.medium","m3.large","m3.xlarge","m4.large","m4.xlarge","c4.large","c4.xlarge"],
      "Description" : "Select an instance size. Default is t2.micro."
    },
    "SpokeTagParam" :{
      "Type" : "String",
      "Default" : "aviatrix-spoke",
      "Description" : "Tag to be used to identify spoke VPCs to connect to Transit VPC. Default is aviatrix-spoke."
    },
    "OtherAccountParam" : {
        "Type" : "String",
        "Default" : "",
        "Description" : "(Optional) Enter the number of the secondary AWS account where spokes will be deployed."
     },
    "OtherAccountRoleAppParam" : {
       "Type" : "String",
       "Default" : "",
       "Description" : "(Optional) Enter the ARN of the aviatrix-role-app on the secondary account where spokes will be deployed."
    },
    "OtherAccountRoleEC2Param" : {
       "Type" : "String",
       "Default" : "",
       "Description" : "(Optional) Enter the ARN of the Aviatrix-role-ec2 on the secondary account where spokes will be deployed."
    },
    "LicenseModel" : {
      "Description" : "Choose between BYOL or License Included - licensing models.",
      "Type" : "String",
      "Default" : "LicenseIncluded",
      "AllowedValues" : [ "LicenseIncluded", "BYOL" ]
    },
    "License": {
      "Description" : "(Required, only if using BYOL License Model) If you don't have one, please contact sales@aviatrix.com. For LicenseIncluded leave BLANK",
      "Type" : "String"
    }
  },
  "Conditions" : {
    "NotBlankLicense" : { "Fn::Not" : [ { "Fn::Equals": [ { "Ref": "License" }, "" ] } ] }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : { "LicenseIncluded" : "ami-84aaf3fe",  "BYOL": "ami-84aaf3fe" },
      "us-east-2" : { "LicenseIncluded" : "ami-b182a9d4",  "BYOL": "ami-b182a9d4" },
      "us-west-1" : { "LicenseIncluded" : "ami-5da9a93d",  "BYOL": "ami-5da9a93d" },
      "us-west-2" : { "LicenseIncluded" : "ami-af0ebad7",  "BYOL": "ami-af0ebad7" },
      "ca-central-1" : { "LicenseIncluded" : "ami-908702f4",  "BYOL": "ami-908702f4" },
      "eu-central-1" : { "LicenseIncluded" : "ami-d44edcbb",  "BYOL": "ami-d44edcbb" },
      "eu-west-1" : { "LicenseIncluded" : "ami-beaa39c7",  "BYOL": "ami-beaa39c7" },
      "eu-west-2" : { "LicenseIncluded" : "ami-02b7af66",  "BYOL": "ami-02b7af66" },
      "eu-west-3" : { "LicenseIncluded" : "ami-4000b73d",  "BYOL": "ami-4000b73d" },
      "ap-southeast-1" : { "LicenseIncluded" : "ami-b65122ca",  "BYOL": "ami-b65122ca" },
      "ap-southeast-2" : { "LicenseIncluded" : "ami-58e01d3a",  "BYOL": "ami-58e01d3a" },
      "ap-northeast-1" : { "LicenseIncluded" : "ami-75ec7413",  "BYOL": "ami-75ec7413" },
      "ap-northeast-2" : { "LicenseIncluded" : "ami-1596367b",  "BYOL": "ami-1596367b" },
      "sa-east-1" : { "LicenseIncluded" : "ami-e94c0e85",  "BYOL": "ami-e94c0e85" },
      "ap-south-1" : { "LicenseIncluded" : "ami-18194e77",  "BYOL": "ami-18194e77" }
    }
  },
  "Resources" : {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "NewVPCCIDRParam"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix VPC" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "InternetGateway": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Name", "Value": "IGW - Aviatrix VPC" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "DependsOn": [ "VPC", "InternetGateway" ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
            "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Ref" : "NewAZParam" },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "NewSubnetParam"
        },
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix VPC-Public Subnet" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "PublicSubnetHA": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Ref" : "NewAZParamHA" },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "NewSubnetParamHA"
        },
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix VPC-Public Subnet HA" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "RouteTable": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            { "Key": "Name", "Value": "Aviatrix VPC-Route Table" },
            { "Key": "Project", "Value": "Aviatrix" },
            { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
          ]
      }
    },
    "DefaultRoute": {
      "DependsOn": [ "VPC", "InternetGateway" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
          "RouteTableId": {
            "Ref": "RouteTable"
          },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "PrivateSubnet1ARouteTableAssociation": {
      "DependsOn" : [ "PublicSubnet", "RouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
          "SubnetId": {
            "Ref": "PublicSubnet"
          },
          "RouteTableId": {
            "Ref": "RouteTable"
          }
      }
    },
    "PrivateSubnet1ARouteTableAssociationHA": {
      "DependsOn" : [ "PublicSubnetHA", "RouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
          "SubnetId": {
            "Ref": "PublicSubnetHA"
          },
          "RouteTableId": {
            "Ref": "RouteTable"
          }
      }
    },

    "AviatrixController" : {
      "DependsOn" : [ "PublicSubnet" , "AviatrixSG" ],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, { "Ref": "LicenseModel" } ] },
        "KeyName" : { "Ref": "KeyNameParam" },
        "InstanceType": { "Ref" : "ControllerSizeParam" },
        "IamInstanceProfile" : "aviatrix-role-ec2",
        "NetworkInterfaces": [ {
          "DeviceIndex": "0",
          "GroupSet": [ { "Ref" : "AviatrixSG" } ],
          "SubnetId": { "Ref" : "PublicSubnet" }
        } ],
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix Controller" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },
    "AviatrixEIP": {
      "DependsOn" : "AviatrixController",
      "Type": "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : {"Ref":  "AviatrixController" }
      }
    },
    "AviatrixSG": {
      "DependsOn" : "VPC",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "AviatrixControllerSG",
        "GroupDescription": "Aviatrix - Allow HTTPS to Controller",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "CidrIp": "0.0.0.0/0",
          "FromPort": "443",
          "ToPort": "443"
        } ],
        "Tags": [
          { "Key": "Name", "Value": "Aviatrix Security Group" },
          { "Key": "Project", "Value": "Aviatrix" },
          { "Key": "CreatedUsing", "Value": "Aviatrix Quickstart" }
        ]
      }
    },

    "AviatrixKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to encrypt Aviatrix Data",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [ {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root" ] ] }
                ]
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ] }
                ]
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "AviatrixGWQueue": {
      "Type": "AWS::SQS::Queue"
    },
    "AviatrixControllerLambda": {
      "DependsOn": "AviatrixEIP",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "aviatrix_controller.handler",
        "Role": {
          "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "quickstart-aviatrix-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "scripts/aviatrix_controller.py.zip"
        },
        "KmsKeyArn": {
          "Fn::GetAtt": [ "AviatrixKey", "Arn" ]
        },
        "Environment": {
          "Variables": {
            "Controller_IP": {
              "Fn::GetAtt" : [ "AviatrixController" , "PublicIp" ]
            },
            "Username": "admin",
            "Private_IP": {
              "Fn::GetAtt" : [ "AviatrixController" , "PrivateIp" ]
            },
            "Admin_Email": {
              "Ref": "AdminEmailParam"
            },
            "Password": {
              "Ref": "PasswordParam"
            },
            "Account": {
              "Ref": "AWS::AccountId"
            },
            "AviatrixRoleApp": {
              "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/aviatrix-role-app" ] ]
            },
            "AviatrixRoleEC2": {
              "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/aviatrix-role-ec2" ] ]
            },
            "VPC": {
              "Ref": "VPC"
            },
            "SubnetParam": {
              "Ref": "NewSubnetParam"
            },
            "SubnetParamHA": {
              "Ref": "NewSubnetParamHA"
            },
            "Region": {
              "Ref": "AWS::Region"
            },
            "HubGWSizeParam": {
              "Ref": "HubGWSizeParam"
            },
            "SpokeGWSizeParam": {
              "Ref": "SpokeGWSizeParam"
            },
            "GatewayQueue": {
              "Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
            },
            "GatewayQueueURL": {
              "Ref": "AviatrixGWQueue"
            },
            "GatewayTopic": {
              "Ref": "AviatrixGWTopic"
            },
            "OtherAccount": {
              "Ref": "OtherAccountParam"
            },
            "OtherAccountRoleApp": {
              "Ref": "OtherAccountRoleAppParam"
            },
            "OtherAccountRoleEC2": {
              "Ref": "OtherAccountRoleEC2Param"
            },
            "LicenseModel" : {
              "Ref": "LicenseModel"
            },
            "License" : {
              "Ref": "License"
            }
          }
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },

    "AviatrixGatewayLambda": {
      "DependsOn": "AviatrixEIP",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "aviatrix_gateway.handler",
        "Role": {
          "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "quickstart-aviatrix-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "scripts/aviatrix_gateway.py.zip"
        },
        "KmsKeyArn": {
          "Fn::GetAtt": [ "AviatrixKey", "Arn" ]
        },
        "Environment": {
          "Variables": {
            "Controller_IP": {
              "Fn::GetAtt" : [ "AviatrixController" , "PublicIp" ]
            },
            "Username": "admin",
            "Password": {
              "Ref": "PasswordParam"
            },
            "VPC": {
              "Ref": "VPC"
            },
            "Region": {
              "Ref": "AWS::Region"
            },
            "HubGWSizeParam": {
              "Ref": "HubGWSizeParam"
            },
            "SpokeGWSizeParam": {
              "Ref": "SpokeGWSizeParam"
            },
            "SpokeTag": {
              "Ref": "SpokeTagParam"
            },
            "OtherAccountRoleApp": {
              "Ref": "OtherAccountRoleAppParam"
            },
            "GatewayQueue": {
              "Fn::GetAtt": ["AviatrixGWQueue", "QueueName"]
            },
            "GatewayQueueURL": {
              "Ref": "AviatrixGWQueue"
            }
          }
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },
    "AviatrixGWTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [{
          "Endpoint": {
            "Fn::GetAtt": [ "AviatrixGatewayLambda", "Arn" ]
          },
          "Protocol": "lambda"
        }]
      }
    },
    "InvokeGWLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "AviatrixGWTopic"
        },
        "FunctionName": {
          "Fn::GetAtt": [ "AviatrixGatewayLambda", "Arn" ]
        }
      }
    },
    "AviatrixPollerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "aviatrix_poller.handler",
        "Role": {
          "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/service-role/aviatrix-role-api" ] ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [ "", [ "quickstart-aviatrix-", { "Ref": "AWS::Region" } ] ]
          },
          "S3Key": "scripts/aviatrix_poller.py.zip"
        },
        "KmsKeyArn": {
          "Fn::GetAtt": [ "AviatrixKey", "Arn" ]
        },
        "Environment": {
          "Variables": {
            "GatewayQueue": {
              "Fn::GetAtt": [ "AviatrixGWQueue", "QueueName" ]
            },
            "GatewayQueueURL": {
              "Ref": "AviatrixGWQueue"
            },
            "HubVPC": {
              "Ref": "VPC"
            },
            "SpokeGWSizeParam": {
              "Ref": "SpokeGWSizeParam"
            },
            "SpokeTag": {
              "Ref": "SpokeTagParam"
            },
            "OtherAccountRoleApp": {
              "Ref": "OtherAccountRoleAppParam"
            },
            "GatewayTopic": {
              "Ref": "AviatrixGWTopic"
            }
          }
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },
    "AviatrixPollerEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Rule to trigger AviatrixPoller every 2 minutes to find VPCs that need to be attached to the Transit Hub VPC.",
        "ScheduleExpression": "cron(/2 * * * ? *)",
        "State": "ENABLED",
        "Targets": [ {
          "Id": {
            "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "Poller-2min" ] ]
          },
          "Arn": {
            "Fn::GetAtt": [ "AviatrixPollerLambda", "Arn" ]
          }
        } ]
      }
    },
    "AVXPollerEventPerm": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AviatrixPollerLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [ "AviatrixPollerEvent", "Arn" ]
        }
      }
    }

  },
  "Outputs" :
  {
    "AviatrixControllerEIP" : { "Description": "AviatrixController External IP", "Value" : { "Fn::GetAtt" : [ "AviatrixController" , "PublicIp" ] } },
    "AviatrixControllerPrivateIP" : { "Description": "AviatrixController Private IP", "Value" : { "Fn::GetAtt" : [ "AviatrixController" , "PrivateIp" ] } }
  }
}
